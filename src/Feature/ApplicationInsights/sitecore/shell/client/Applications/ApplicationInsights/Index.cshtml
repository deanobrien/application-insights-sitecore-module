@model DeanOBrien.Feature.ApplicationInsights.Models.ApplicationDetails
@using Newtonsoft.Json

@using DeanOBrien.Foundation.DataAccess.ApplicationInsights.Models
<script src="/sitecore/shell/client/Applications/ApplicationInsights/js/jquery-1.12.4.min.js" charset="utf-8" type="text/javascript"></script>
<link rel="shortcut icon" href="/sitecore/images/favicon.ico" />
<link href="/sitecore/shell/client/Speak/Assets/css/speak-default-theme.css" rel="stylesheet" type="text/css" />
<link href="/sitecore/shell/client/Applications/LaunchPad/LaunchPad.css" rel="stylesheet" type="text/css" />
<link href="/sitecore/shell/client/Applications/ExperienceAnalytics/Common/ExperienceAnalytics.css" rel="stylesheet" type="text/css" />
<link href="/sitecore/shell/client/Applications/ApplicationInsights/css/ApplicationInsights.css" rel="stylesheet" type="text/css" />

@{
    var currentApp = Model.Application.Id.ToString().ToUpper();
    var currentAppInList = new List<Application>();
    currentAppInList.Add(Model.Application);
    var jsplumbHeight = 280;
    var width = 270;
    var height = 64;
    double top;
    double left;
    double totalApps;

    var count = 0;
    var positionString = "";
    var zones = 1;
    double zoneHeight = 0;
    var applicationGroups = new List<List<Application>>();
    applicationGroups.Add(currentAppInList);
    if (Model.FirstTier.Count != 0)
    {
        if (Model.FirstTier.Count > 10) { jsplumbHeight = 350; }
        applicationGroups.Add(Model.FirstTier);
        zones++;
        if (Model.SecondTier.Count != 0)
        {
            jsplumbHeight = 370;
            zones++;
            applicationGroups.Add(Model.SecondTier);
            if (Model.ThirdTier.Count != 0)
            {
                jsplumbHeight = 420;
                zones++;
                applicationGroups.Add(Model.ThirdTier);
                if (Model.ForthTier.Count != 0)
                {
                    zones++;
                    jsplumbHeight = 460;
                    applicationGroups.Add(Model.ForthTier);
                    if (Model.FifthTier.Count != 0)
                    {
                        zones++;
                        jsplumbHeight = 500;
                        applicationGroups.Add(Model.FifthTier);
                    }
                }
            }
        }
    }
    zoneHeight = 100 / zones;

    var displayedApps = new List<Guid>();
    displayedApps.Add(Model.Application.Id);
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <style>
        #jsplumb-container {
            height: @(jsplumbHeight) px;
        }
        .currentApplication
        {
            left:calc(50% - @(width / 2)px);
            top:calc(100% - @(height)px);
        }
    </style>
    <script>
        var systemPrompt = "";
        var file = "";
        var variationId = "1";
        var allowAiOverview = true;
        var allowAiSummary = true;
        var allowAiHealthCheck = false;
    </script>
</head>
<body class="sc">
    <header class="sc-globalHeader">
        <div class="row sc-globalHeader-content">
            <div class="col-md-6">
                <div class="sc-globalHeader-startButton">
                    <a class="sc-global-logo medium" href="/sitecore/shell/sitecore/client/applications/launchpad"></a>
                </div>
                <div class="sc-globalHeader-navigationToggler">

                </div>
                <div class="sc-globalheader-appName">

                </div>
            </div>
            <div class="col-md-6">
                <div class="sc-globalHeader-loginInfo">
                    <ul data-sc-id="c_c642516f92b266a2" class="sc-accountInformation sc_AccountInformation_3 data-sc-registered" data-sc-require="/-/speak/v1/business/AccountInformation.js">
                        <li>
                            Administrator
                            <img src="/temp/iconcache/office/32x32/default_user.png">
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </header>
    <section class="sc-applicationContent">
        <header class="sc-applicationHeader">

            <div class="sc-applicationHeader-row1 no-breadcrumb">
                <div class="sc-applicationHeader-content">
                    <div class="sc-applicationHeader-title">
                        <span data-sc-id="Text2" class="sc-text sc_Text_8 data-sc-registered" data-bind="text: text, visible: isVisible" data-sc-require="/-/speak/v1/business/text.js">Sitecore Experience Platform</span>
                    </div>
                </div>
            </div>

        </header>
    </section>
    <div class="row">
        <div class="col-md-4">
            <h2>Application Insights for: @Model.Application.Title</h2>
            <div>
                @if (!string.IsNullOrWhiteSpace(Model.InnerMessageBase64))
                {
                    <a href="@(Model.Application.Id)?problemIdBase64=@(Model.ProblemIdBase64)&timespan=@(Model.TimeSpan)" class="btn btn-default">Back</a>
                }
                else if (!string.IsNullOrWhiteSpace(Model.ProblemIdBase64))
                {
                    <a href="@(Model.Application.Id)?timespan=@(Model.TimeSpan)" class="btn btn-default">Back</a>
                }
                <a href="?timespan=1h" class="btn btn-default @if (Model.TimeSpan == "1h"){ @Html.Raw("btn-primary");}">1hr</a>
                <a href="?timespan=2h" class="btn btn-default @if (Model.TimeSpan == "2h"){ @Html.Raw("btn-primary");}">2hr</a>
                <a href="?timespan=6h" class="btn btn-default @if (Model.TimeSpan == "6h"){ @Html.Raw("btn-primary");}">6hr</a>
                <a href="?timespan=1d" class="btn btn-default @if (Model.TimeSpan == "1d"){ @Html.Raw("btn-primary");}">1d</a>
                <a href="?timespan=3d" class="btn btn-default @if (Model.TimeSpan == "3d"){ @Html.Raw("btn-primary");}">3d</a>
                <a href="?timespan=7d" class="btn btn-default @if (Model.TimeSpan == "7d"){ @Html.Raw("btn-primary");}">7d</a>
                <select id="appDropdown" class="btn btn-default">
                    <option value="40e38b9f-004b-4da2-a41e-a15e4c2326ca">Content Management</option>
                </select>

                @if (string.IsNullOrEmpty(Model.ProblemIdBase64))
                {
                    <a onclick="CallAISummary();return false;" class="btn btn-success">Get AI Summary</a>
                }


            </div>
            <div id="triggeredAlerts">
                <h3>Alerts</h3>

                <img src="/sitecore/shell/client/Applications/ApplicationInsights/img/giphy.gif" class="loader">
                <p class="noResult" style="display:none">None found</p>

            </div>
            <div id="groupedExceptions">
                <h3>Grouped Exceptions</h3>
                @if (!string.IsNullOrWhiteSpace(Model.Application.ApplicationInsightsId))
                {
                    <img src="/sitecore/shell/client/Applications/ApplicationInsights/img/giphy.gif" class="loader">
                    <p class="noResult" style="display:none">None found</p>
                }
                else
                {
                    <p>Please set <b>ApplicationInsightsId</b> for this application to see data.</p>
                }

                <script id="triggeredAlertTpl" type="text/template">
                    <div class="sc-launchpad-item">
                        <span class='icon'>
                            <span class="count">{{DayTriggered}}</span><br>
                            {{MonthTriggered}}

                        </span>
                        <span>
                            <b>{{Title}}</a><br />
                        </span>
                    </div>
                </script>

                <script id="groupedExceptionTpl" type="text/template">
                    <div class="sc-launchpad-item">
                        <span class='icon'>
                            <span class="count">{{Count}}</span>
                            COUNT
                        </span>
                        <span>
                            <b>ProblemID:</b> <a href="{{ApplicationId}}?problemIdBase64={{ProblemIdBase64}}&innerMostMessageBase64={{InnerMostMessageBase64}}&timespan=@(Model.TimeSpan)">{{ProblemId}}</a><br />
                        </span>
                    </div>
                </script>

                <script id="groupedExceptionWithMessageTpl" type="text/template">
                    <div class="sc-launchpad-item detailed">
                        <span class='icon'>
                            <span class="count">{{Count}}</span>
                            COUNT
                        </span>
                        <span>
                            <b>ProblemID:</b> <a href="{{ApplicationId}}?problemIdBase64={{ProblemIdBase64}}&innerMostMessageBase64={{InnerMostMessageBase64}}&timespan=@(Model.TimeSpan)">{{ProblemId}}</a><br /><br />
                            <b>Message:</b> <a href="{{ApplicationId}}?problemIdBase64={{ProblemIdBase64}}&innerMostMessageBase64={{InnerMostMessageBase64}}&timespan=@(Model.TimeSpan)">{{InnerMostMessage}}</a>
                        </span>
                    </div>
                </script>
                <script id="singleGroupedExceptionTpl" type="text/template">
                    <div class="sc-launchpad-item detailed">
                        <span class='icon'>
                            <span class="count">{{Count}}</span>
                            COUNT
                        </span>
                        <div>
                            <p>
                                <b>ProblemId:</b><br />{{ProblemId}}
                            </p>
                            <p>
                                <b>OuterMessage:</b><br />{{OuterMessage}}
                            </p>
                            <p>
                                <b>InnerMostMessage:</b><br />{{InnerMostMessage}}
                            </p>
                            <p>
                                <b>OuterType:</b><br />{{OuterType}}
                            </p>
                            <p>
                                <b>Type:</b><br />{{Type}}
                            </p>
                            <p>
                                <b>InnerMostType:</b><br />{{InnerMostType}}
                            </p>
                            <p>
                                <b>OuterAssembly:</b><br />{{OuterAssembly}}
                            </p>
                            <p>
                                <b>Assembly:</b><br />{{Assembly}}
                            </p>
                            <p>
                                <b>OuterMethod:</b><br /> {{OuterMethod}}
                            </p>
                            <p>
                                <b>Method:</b><br />{{Method}}
                            </p>
                        </div>
                    </div>
                </script>
            </div>
        </div>
        <div class="col-md-8">

            @if (Model.StackTraceVariations.Count > 0)
            {
                var stackTraceTitle = "Stack Trace";
                int i = 1;
                if (Model.StackTraceVariations.Count > 1)
                {
                    stackTraceTitle = "Stack Trace Variations";
                }

                <h3>@stackTraceTitle</h3>

                if (Model.StackTraceVariations.Count > 1)
                {

                    <div>
                        @foreach (var item in Model.StackTraceVariations.Take(10))
                        {
                            if (i == 1)
                            {
                                <a class="btn btn-default btn-primary variationToggle" var-id="@i" var-sysPrompt="@item.Item5" var-file="@item.Item2">Variation (@item.Item4)</a>
                            }
                            else
                            {
                                <a class="btn btn-default variationToggle" var-id="@i" var-sysPrompt="@item.Item5" var-file="@item.Item2">Variation (@item.Item4)</a>
                            }
                            i++;
                        }

                        <a onclick="CallAIOverview(); return false;" class="btn btn-success">Get AI Analysis</a>

                        @if (Model.StackTraceVariations.Count > 10)
                        {
                            <span>only first 10 variations shown...</span>
                        }
                    </div>
                }
                else
                {
                    <p><b>All exceptions share the exact same stack trace.</b></p>
                }

                i = 1;
                foreach (var item in Model.StackTraceVariations.Take(10))
                {
                    string displayString = "display:none;";
                    if (i == 1)
                    {
                        displayString = "display:block;";

                        <script>
                                file = "@item.Item2";
                                systemPrompt = "@item.Item5";
                        </script>
                    }


                    dynamic parsedJson = JsonConvert.DeserializeObject(item.Item1);
                    string stackTrace = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
                    stackTrace = stackTrace.Replace("<!--", "");
                    stackTrace = stackTrace.Replace("-->", "");
                    <div id="variation@(i)" class="variation" style="@displayString">
                        <p>There were <b>@item.Item4</b> exceptions that share the stack trace below</p>
                        @if (!string.IsNullOrWhiteSpace(item.Item2) && item.Item3 > 0)
                        {
                            <p>The following custom code should be reviewed: <b>@item.Item2</b> [Line: @item.Item3]</p>
                            <p></p>
                        }

                        <pre style="height:200px">@Html.Raw(stackTrace)</pre>

                        <div id="aiOverviewContainer@(i)" class="aiOverviewContainer" style="display:none">
                            <h3>
                                <svg class="fWWlmf JzISke" height="24" width="24" aria-hidden="true" viewBox="0 0 471 471" xmlns="http://www.w3.org/2000/svg"><path fill="var(--m3c23)" d="M235.5 471C235.5 438.423 229.22 407.807 216.66 379.155C204.492 350.503 187.811 325.579 166.616 304.384C145.421 283.189 120.498 266.508 91.845 254.34C63.1925 241.78 32.5775 235.5 0 235.5C32.5775 235.5 63.1925 229.416 91.845 217.249C120.498 204.689 145.421 187.811 166.616 166.616C187.811 145.421 204.492 120.497 216.66 91.845C229.22 63.1925 235.5 32.5775 235.5 0C235.5 32.5775 241.584 63.1925 253.751 91.845C266.311 120.497 283.189 145.421 304.384 166.616C325.579 187.811 350.503 204.689 379.155 217.249C407.807 229.416 438.423 235.5 471 235.5C438.423 235.5 407.807 241.78 379.155 254.34C350.503 266.508 325.579 283.189 304.384 304.384C283.189 325.579 266.311 350.503 253.751 379.155C241.584 407.807 235.5 438.423 235.5 471Z"></path></svg> AI Analysis
                            </h3>
                            <div id="azure-result" style="display:none"><img src="/sitecore/shell/client/Applications/ApplicationInsights/img/loading-dots.gif" width="100px"></div>
                            <div id="azure-actions" style="display:none">
                                @if (Model.WorkItemId == 0)
                                {
                                    <p>If you are happy with the suggested changes you can submit a <b>pull request</b>. Alternatively, save the recommendations in a <b>work item</b> below.</p>

                                    <form onsubmit="return false;" style="display:inline-block">
                                        <input type="hidden" id="base64AiOverviewPR@(i)" name="base64AiOverviewPR@(i)" />
                                        <input type="hidden" id="fileNamePR@(i)" name="fileNamePR@(i)" />
                                        <input type="hidden" id="problemIdBase64" name="problemIdBase64" value="@(Model.ProblemIdBase64)">
                                        <input type="submit" value="Submit a pull request" class="btn btn-success" onclick="CreatePR(@(i));" />
                                    </form>

                                    <form onsubmit="return false;" style="display:inline-block">
                                        <input type="hidden" id="base64AiOverview@(i)" name="base64AiOverview@(i)" />
                                        <input type="hidden" id="fileName@(i)" name="fileName@(i)" />
                                        <input type="hidden" id="problemIdBase64" name="problemIdBase64" value="@(Model.ProblemIdBase64)">
                                        <input type="submit" value="Create a backlog item" class="btn btn-primary" onclick="SubmitToBacklog(@(i));" />
                                    </form>
                                }
                                else
                                {
                                    <div class="alert alert-warning"><p>You are unable to create a pull request or a work item, because work item #@(Model.WorkItemId) covers the same problem.</p></div>
                                }
                            </div>

                            <div id="aiOverview@(i)"><p><img src="/sitecore/shell/client/Applications/ApplicationInsights/img/loading-dots.gif" width="100px"></p></div>

                        </div>

                        @if (!string.IsNullOrEmpty(Model.AnalysisFromWorkItem))
                        {
                            <div>
                                <h3>Work Item Found</h3>
                                <p>A <a href="https://unn-tfs.visualstudio.com/UNN-DEV-Apps-CorpWebsite-GIT/_workitems/edit/@(Model.WorkItemId)/" target="_blank">work item #@(Model.WorkItemId)</a> exists in Azure Devops that deals with this problem.</p>
                                @Html.Raw(Model.AnalysisFromWorkItem)
                            </div>
                        }

                    </div>

                    i++;
                }

            }
            else
            {
                <div id="aiHealth"></div>
                <div id="aiSummaryContainer" style="display:none">
                    @if (string.IsNullOrEmpty(Model.ProblemIdBase64))
                    {
                        <h3>
                            <svg class="fWWlmf JzISke" height="24" width="24" aria-hidden="true" viewBox="0 0 471 471" xmlns="http://www.w3.org/2000/svg"><path fill="var(--m3c23)" d="M235.5 471C235.5 438.423 229.22 407.807 216.66 379.155C204.492 350.503 187.811 325.579 166.616 304.384C145.421 283.189 120.498 266.508 91.845 254.34C63.1925 241.78 32.5775 235.5 0 235.5C32.5775 235.5 63.1925 229.416 91.845 217.249C120.498 204.689 145.421 187.811 166.616 166.616C187.811 145.421 204.492 120.497 216.66 91.845C229.22 63.1925 235.5 32.5775 235.5 0C235.5 32.5775 241.584 63.1925 253.751 91.845C266.311 120.497 283.189 145.421 304.384 166.616C325.579 187.811 350.503 204.689 379.155 217.249C407.807 229.416 438.423 235.5 471 235.5C438.423 235.5 407.807 241.78 379.155 254.34C350.503 266.508 325.579 283.189 304.384 304.384C283.189 325.579 266.311 350.503 253.751 379.155C241.584 407.807 235.5 438.423 235.5 471Z"></path></svg> AI Summary
                        </h3>
                        <div id="aiOverview"><p><img src="/sitecore/shell/client/Applications/ApplicationInsights/img/loading-dots.gif" width="100px"></p></div>
                    }
                </div>

                <div style="padding:50px">
                    <div id="jsplumb-container">
                        <div id="@currentApp" class="app sc-launchpad-item currentApplication WebApp">
                            <span class="icon">
                                <img src="/temp/iconcache/launchpadicons/48x48/desktop.png" width="48" height="48" alt="Desktop">
                            </span>
                            <span class="sc-launchpad-text">
                                <a href="./@Model.Application.Id?timespan=@Model.TimeSpan">@Model.Application.Title.ToUpper()</a>
                            </span>
                            <div class="result"></div>
                        </div>

                        @for (int row = 0; row < zones; row++)
                        {
                            count = 0;
                            var applications = applicationGroups[zones - row - 1];
                            totalApps = (double)applications.Count;
                            double currentColwidth = 100 / totalApps;
                            double topMod = (double)(totalApps / 2) - (double)totalApps;
                            foreach (var item in applications)
                            {
                                if (!displayedApps.Contains(item.Id))
                                {

                                    displayedApps.Add(item.Id);
                                    top = ((row + 1) * zoneHeight) - ((zoneHeight / totalApps) * (count));
                                    if (count % 3 == 0) { top = top + (topMod * (zoneHeight / totalApps)); }
                                    if (totalApps == 1)
                                    {
                                        top = ((row + 1) * zoneHeight) - (zoneHeight / 2);
                                    }
                                    left = ((currentColwidth * count) + (currentColwidth / 2));
                                    count++;
                                    positionString = "top:calc(" + top + "% - " + (height / 2) + "px);left:calc(" + left + "% - " + (width / 2) + "px);";

                                    <div id="@(item.Id.ToString().ToUpper())" class="WebApp app sc-launchpad-item" style="@positionString">
                                        <span class="icon">
                                            <img src="/temp/iconcache/launchpadicons/48x48/desktop.png" width="48" height="48" alt="Desktop">
                                        </span>
                                        <span class="sc-launchpad-text">
                                            <a href="./@item.Id">@item.Title</a>
                                        </span>
                                        <div class="result"></div>
                                    </div>
                                }
                                topMod += 1;
                            }
                        }
                    </div>
                </div>
            }
            @if (Model.SummaryOfExceptions != null)
            {
                <div style="width:100%" id="daily">
                    <p><a class="btn btn-default btn-primary dailySwitch">Daily</a><a class="btn btn-default dailySwitch">Hourly</a></p>
                    <div>
                        <canvas id="canvas" height="180" width="600"></canvas>
                        <div id="js-legend" class="chart-legend"></div>
                    </div>
                </div>
                <div style="width:100%;" id="hourly">
                    <p><a class="btn btn-default dailySwitch">Daily</a><a class="btn btn-default btn-primary dailySwitch">Hourly</a></p>
                    <div>
                        <canvas id="canvas2" height="180" width="600"></canvas>
                        <div id="js-legend2" class="chart-legend"></div>
                    </div>
                </div>
            }
            else
            {
                <br />
                <h3>Problem Connecting to Database</h3>
                <p>@Html.Raw(Model.ErrorMessage)</p>
            }
        </div>

    </div>

    <script>
        function SubmitToBacklog(id) {
            $("#azure-actions").hide();
            $("#azure-result").show();

            console.log("/sitecore/shell/sitecore/client/applications/applicationinsights/SubmitToBacklog/" + id);
            var base64AiOverview = $("#base64AiOverview" + id);
            var file = $("#fileName" + id);
            var prIdBase64 = $("#problemIdBase64");

            $.post("/sitecore/shell/sitecore/client/applications/applicationinsights/SubmitToBacklog/" + id, { previousBase64Response: base64AiOverview.val(), fileName: file.val(), problemIdBase64: prIdBase64.val() }, function (data) {
                console.log(data);
                if (data == true) {
                    $("#azure-result").html("<div class='alert alert-warning'><p>Back log item successfully created</p></div>");
                }
                else {
                    $("#azure-result").html("<div class='alert alert-danger'><p>There was a problem creating the back log item " + data + "</p></div>");
                }

            });
        }
        function CreatePR(id) {
            $("#azure-actions").hide();
            $("#azure-result").show();

            console.log("/sitecore/shell/sitecore/client/applications/applicationinsights/CreatePR/" + id);
            var base64AiOverview = $("#base64AiOverviewPR" + id);
            var file = $("#fileNamePR" + id);
            var prIdBase64 = $("#problemIdBase64");
            $.post("/sitecore/shell/sitecore/client/applications/applicationinsights/CreatePR/" + id, { previousBase64Response: base64AiOverview.val(), fileName: file.val(), problemIdBase64: prIdBase64.val() }, function (data) {
                console.log(data);
                if (data == true) {
                    $("#azure-result").html("<div class='alert alert-warning'><p>Pull request successfully created</p></div>");
                }
                else {
                    $("#azure-result").html("<div class='alert alert-danger'><p>There was a problem creating the pull request "+data+"</p></div>");
                }
            });
        }
        var timespan = "@Model.TimeSpan";
        var id = "@(Model.Application.Id)";
        var problemIdBase64 = "@(Model.ProblemIdBase64)";
        var innerMessageBase64 = "@(Model.InnerMessageBase64)";
        @if (Model.SummaryOfExceptions != null)
        {
            <text>
            var dailyLabels = @Html.Raw(JsonConvert.SerializeObject(Model.SummaryOfExceptions.DailyLabels));
            var dailyValues = @Html.Raw(JsonConvert.SerializeObject(Model.SummaryOfExceptions.DailyValues));
            var hourlyLabels = @Html.Raw(JsonConvert.SerializeObject(Model.SummaryOfExceptions.Labels));
            var hourlyValues = @Html.Raw(JsonConvert.SerializeObject(Model.SummaryOfExceptions.Values));
            </text>
        }

    </script>
    <script src="/sitecore/shell/client/Applications/ApplicationInsights/js/jsplumb.js" charset="utf-8" type="text/javascript"></script>
    <script src="/sitecore/shell/client/Applications/ApplicationInsights/js/ApplicationInsightsFlowChart.js" charset="utf-8" type="text/javascript"></script>

    @if (!string.IsNullOrWhiteSpace(Model.Application.ApplicationInsightsId))
    {
        <script src="/sitecore/shell/client/Applications/ApplicationInsights/js/mustache.js" charset="utf-8" type="text/javascript"></script>
        <script src="/sitecore/shell/client/Applications/ApplicationInsights/js/ApplicationInsightsExceptions.js" charset="utf-8" type="text/javascript"></script>
    }
    @if (Model.SummaryOfExceptions != null)
    {
        <script src="/sitecore/shell/client/Applications/ApplicationInsights/js/Chart.js" charset="utf-8" type="text/javascript"></script>
        <script src="/sitecore/shell/client/Applications/ApplicationInsights/js/ApplicationInsightsGraphs.js" charset="utf-8" type="text/javascript"></script>
    }
    <script>
    function formSubmitted(id, t) {
        var additional = document.getElementById('promptDetails').value;
        var aiContainer = document.getElementById('aiOverview');

        aiContainer.innerHTML = '<p><img src="/sitecore/shell/client/Applications/ApplicationInsights/img/loading-dots.gif" width="100px"></p>';
        getAISummary(id, t, additional);
    }
    @*function CallOverviewAfterPageLoad() {

        @if (Model.StackTraceVariations.Count > 0)
        {
            <text>getAIOverview(systemPrompt, file, variationId); </text>
        }
        console.log('CallOverviewAfterPageLoad');
        return false;
    }
    function CallSummaryAfterPageLoad() {
        @if (string.IsNullOrEmpty(Model.ProblemIdBase64) && Model.SummaryOfExceptions !=null)
        {
            <text>getAISummary(id, '@(Model.SummaryOfExceptions.HoursToReview)h', ''); </text>
        }
        console.log('CallSummaryAfterPageLoad');
        return false;
    }*@
    function CallAISummary() {
$("#aiSummaryContainer").show();

        @if (string.IsNullOrEmpty(Model.ProblemIdBase64) && Model.SummaryOfExceptions !=null)
        {
            <text>getAISummary(id, '@(Model.SummaryOfExceptions.HoursToReview)h', ''); </text>
        }
        else
        {
            // This is not available in this view
        }
        console.log('CallSummary');
        return false;
    }
    function CallAIOverview() {
$(".aiOverviewContainer").show();
        $("#azure-actions").show();
        @if (Model.StackTraceVariations.Count > 0)
        {
            <text>getAIOverview(systemPrompt, file, variationId); </text>
        }
        else
        {
            // This is not available in this view
        }
        return false;
    }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <style>
        .alert-warning {
            color: #856404;
            background-color: #fff3cd;
            border-color: #ffeeba;
        }

        .alert {
            position: relative;
            padding: .75rem 1.25rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: .25rem;
        }
    </style>
</body>
</html>